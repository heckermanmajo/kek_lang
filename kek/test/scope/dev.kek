
# files are directly importe into a namespace
# always like this
import "./path_to_file" as ns_name
import "./path_to_file" as ns_name2

# alle std sachen die verwendet werden sind einfach auto-imported in der
# runtime
# importierte dateien werden einfach in den interpreter-space
# geladen und können dann einfach aufgerufen werden unter dem namen

# scores: function call der einfach db Einträge erstellt.
# datatables -> structs
# rechenzeit messen
# doch in geist byte code übersetzen
# kann im backend dann in c ausgeführt werden mit sqlite
# für die knoten mit extradaten.
# Microservices ...
# Dann fragt man intern die daten ab
# Alle scores werden gecached, man kann in den scores
# so lange rechnen wie man will

# getrenntes frontend vom backend.
# Geist-Protocol

# Einen byte-code designen
# der nur function calls hat, und push sowie pop
# auf einen stack

# du kannst so auch alle nicht gelöschten daten
# tracken
# man will refs löschen, sobald die out of scope
# gehen, damit man nicht zu viel space braucht und
# keine limits sprengt.

# Jeder knoten besteht einfach aus einigen Kek-Dateien
# Es muss sehr fehler-tolerant sein, denn es kann mal sein
# dass nicht alle daten da sind

# das heißt man muss auch fehler infos über scores sammeln können
# um score-scores zu erstellen

# Jeder node bekommt eine Node id
# und eine node-proxy-id in der man die rechte festhält

# return arrow optional

# optimiert für einfachen aber klaren code
# erzwinge named params
# setze compiler-rules mit @


# man hat kein interface, sondern implementiert einfach
# einen name space von funktionen, die erwartet werden

pub fn getWindowHeight () Int { ret 800 }
pub fn getWindowWidth () Int { ret 800 }

# you cannot access directly after a call
# so you are forced to give the return value a name
# so . is only possible if all identifiers before
# are named

val res = a()
set g.g = res.b

#  no name space needed since files are namespaces

pub struct MyStruct {

  field a: mut Int
  field b: Int

  field list: mut [Int]
  field map: mut [String->Int]

  fn myMethod (me: MyStruct) Int {
    val result = me.a + me.b
    ret result
  }

}

# static analysis code ...
# we can write the compiler in geist itself
if isdefined("MyStruct") {
  print("MyStruct is defined")
}

if isdefined("MyStruct" "new") {
  print("MyStruct.new is defined")
}

pub enum Enum {
  val a = 1
  val b = 2
}

fn factory() -> Int|String|Error {
   ret 123
}

pub fn foo(a: Int) -> Int {

  mut my_struct = MyStruct(a=123 b=124)

  out(my_struct:myMethod())

  print("hi")

  val my_enum = Enum.a

  val my_int = Int {
    ret 123 + 124
  }

  val my_int2 = (my_int) Int {
    ret 123 + my_int
  }

  {
     val result = factory()

     if result ?? Int {
        print(itos(it))
     }

     elif result ?? String {
        print(it)
     }

     elif result ?? Error {
        print(it.message)
     }

  }

  mut counter = 0

  for mut i = 0..-10; -1  {
    print(i)
    set counter = counter + 1
  }

  del counter

  mut myList = [1 2 3 4 5]

  mut myMap = [
    "a" -> 1
    "b" -> 2
  ]

  # array access  returns a option --> since the index might not exist
  # if you only have ?? in the conditional
  # there is a "it" value created in the
  # scope following the if
  # same for elif
  if get myMap "a" ?? Int { out(it) }

  if get myList 0 ?? Int {
    out(it)
    val value = it
    if get myList 1 ?? Int { out(it) }
  }

  set myList 0 -> 123
  set myMap "a" -> 123

  ret a + 2
}

# MyType__my_method(self: MyType) -> Int

fn foo(myStruct: MyStruct) Int {

  myStruct:myMethod() # colon followed by a lower case letter -> method call
  set myStruct.a = 123  # field access

  # array access
  set myArray 124 = 123 #  set twi expressions -> array access or map access

}

    val pos = Postion.foo(a=123 b=124)

    val pos = Postion(x=12 y=124)
    val pos = Postion(x=12 y=124)
    fn foo(pos: Postion){}

    foo(Postion(12 12))
    foo(_(12 12))

    a.a.s.e

    out(get my_array 123)

    out(get my_map "key")

    set a = 123

    set a = a.b.c.d().ool()

    S :: struct {
        a: [Int]
    }

    foo :: fn(
      a: [mut Player]
    )
    -> Player
    {

        if get a 0 ?? Player { # local const ?Player
            share p_copy = Player.copy(it)
            ret p_copy
        }

    }

    _ = return_one() # ignore the return value -> do it for the side effect

    # options cannot be set to val
    factory :: fn() Int|String|Error {
        return 123
    }

    {
        val result = factory()
        if result ?? Int {
            print(it)
        }elif result | String {
            print(it)
        }elif result | Error {
            print(it.message)
        }
    }

    factory :: fn() ->
      Int
      |?String
      |Error
    {
        ret 123
    }

    val my_var2 = 1 + 2 * 3 / 5 + 12 - 123 ** 1234

    Postion(12 12)
    Position.new(12 12)

    # data as interface
    atstar

    struct AstarNode {
        field is_passable: Bool
        field next: share mut ?AstarNode

        fn pimmel(me: AstarNode) -> share mut ?AstarNode {
            ret me.next
        }
    }

    struct Tile{
      use a_star_node: AstarNode #  this adds the astar node to tile
      # as compostion
      # this allows to pass a tile to a function that expects an astar node
      # the compiler will automatically pass in the astar node of the tile

      update:: fn(me: Tile, is_passable: Bool) {
          set me.a_star_node.is_passable = is_passable
          set me.is_passable = is_passable
          # both are the same
      }

    }

    t :: new Tile(
      new AstarNode(
        is_passable = true
        next = new AstarNode(false nil)
      )
    )

    t.pimmel()

    WINDOW_HEIGHT :: 800

    foo :: fn() -> Int {
       return 123
    }

    Player :: struct {
        name : String
        position: Position

        tos :: fn(me: Player) -> String {
           return "Player: " + me.name + " at " + me.position.to_string()
        }
    }

        ##

          Struct

          $scope["Player.new"] = function (name: String, &position: array): array {


          }



        ##

        Player.tos :: fn(me: Player) -> String {
           lol
           return "Player: " + me.name + " at " + me.position.to_string()
        }

        ##
         $scope["Player.tos"] = function ($self: &array): string {
            $scope = [];
            return add(
              add(
                "Player: ",
                $self ["name"]
              ),
              add(
                " at ",
                $self["position"]["__methods"]["to_string"](
                  $self ["position"]
                )
              )
            );
         }
        ##

        {
          a := 123
          set a = 1299
        }

        ##

          (function($_scope){
             $scope = [...$_scope];
             define_val($scope,"a", 123);
             set($scope,"a", 1299);
          })($scope);

        ##

        (b){
          a := 123
          set a = 1299
        }

        ##

          (function($b){
             $scope = [
              "b" => $b
             ];
             define_val($scope,"a", 123);
             set($scope,"a", 1299);
          })(get($scope,"b"));

        ##

        ##

        ##

        {
         s1
         {
           s2
           {
             s3
           }
         }

         {
            s4
            class s4_TypeName{
              public function __construct(){
                $this->m = "123";
              }
              public string $m;
            }

            $s4_a = s4_TypeName();

            s4_a -> m

         }

        }

        a :: a

        if a == 124 and b == 123 {
            print(b)
            b.foo.bar()
            # field access
            # function access
            # name space acness sein
        }
        ##
        if
        (
          _and(
            _equals(
              $s1_a, 123
            ),
            _equals(
              $s1_b,
              124
            )
          )
        )
        {

        }


        ##


        ##
          cond(
            equals(get($scope,"a"), 124),
            (function($_scope){
               $scope = [...$scope];
               call(get($scope,"print"), [get($scope,"b")]);
               call(get(get(get($scope,"b"),"foo"),"bar"), []);
            })($scope),
            [
              # else, elif
            ]
          );

        ##
    }

    Player :: enum{
       name :: 1
    }

    p1 := Player(name="John" position=_(12 12))
    out(p1.tos())

    p1 := Player(name="John" position=_(12 12))
    #p1 := Player{ name="John" position=.{x=12 y=12} }

   new <Tyype> ()

# a struct type also creates a function
# TypeName_new
# and TypeName() is translated to TypeName_new()
# _ is treated as a type ...
