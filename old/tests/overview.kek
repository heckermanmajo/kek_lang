
# END GOAL
# very nice static analysis

# interface -> methods
# schema -> fields

# organize modules by concept
# modules can contain multiple files

#main_module
# contains the main function
# and can also contain all types of code chunks

# only state modules allow for mutable state
# on the top level
#state_module node #  semantic name
# : "singleton"
#public interface
#private Implementation/state
# battle, campaign, menu
# only here are objects allowed to be mutable
# all state is in "objects"

# OBJECTS: all state is in objects

#system_module node  #  semantic name
# allows un-pure functions
# but no state

#logic_module form_functions  #  semantic name
#public interface
#private Implementation (local functions)
# game systems

#data_module node_types #  semantic name
#datatype -> does not belong to any module
# objects, etc.

# add constraints to the module
@import("std.out")

# how to do meta structure of code??

# Comment
# object composition -> done
# interface -> done, via schema

# We define a variable

myVar: Int = 10
myVar2 := 21
var counter: Int = 10

counter = counter + 1

# We define a function

myFunction :: fn(a:Int)->Int{
    return a + 1
}

# We call the function
myFunction(10)
myFunction(a=10) # named parameter

myList: List[Int] = [1,2,3,4,5]

var myMap: Map[String,Int] = {
    "one" = 1,
    "two" = 2
}

myMap["one"] = 10

# make a value const after creation
const myMap
# now we can't change the value

constList : const List[Int] = const [1,2,3,4,5]
constList2 := const [1,2,3,4,5]

# generic schema
Container :: schema(T1, T2){
    name:T1 = ---
    age:T2 = 1
}

myContainer : Container[String, Int] = Container[String, Int]{
    name = "John"
    age = 20
}
main.kek

# per file, and need to be at the top
# wecan disallow all language fesatures
@disallow("functions_as_value")
@disallow("lib.file")
@disallow("feature_x")
@disallowall()

@allow("range")

# this is counted recursive
@rule("for_loop_max", 1000)
#@rule("for_loop_depth", 3)

@import("std.out")

# after lock settings no more settings can be set
# otherwise an compile error is thrown
@locksettings

@define(type_name, t1, t2) KOT
     $(type_name) :: interface{
        .get_name :: fn(self)->$(t1)
        .get_age :: fn(self)->$(t2)
     }
@end_define

@when(@DEBUG){

}

@template Option(type_name, type) -> Code{

    $(type_name) :: schema{

        value: ?$(type) = ---
        is_nil: Bool = false

        none :: fn()->$(type_name)->$(type_name){
            return $(type_name){
                value = nil,
                is_nil = true
            }
        }

        some :: fn(value:$(type))->$(type_name){
            return $(type_name){
                value = value,
                is_nil = false
            }
        }

    }

}

# no nested templates allowed ...
@template MyInterface(
    type_name,
    t1,
    t2
) -> Code {
     $(type_name) :: interface{
        .get_name :: fn(self)->$(t1)
        .get_age :: fn(self)->$(t2)
     }
}

@@MyInterface(MyInterface_Str_I, String, Int)

@@ -> mcro where it is called
@ -> macro where it is defined

myObject.is(User)

# we can define a schema
User :: schema{
    name:String = ---
    age:Int = ---

    .print := fn(const self) -> ?Bool {
        print("User: " + self.name + " " self.age)
    }

}
@@List(ListOfUser, User)



user_factory :: fn(name:String, age:Int)-> ?User {
    if age < 0 {
        return OptionalUser.none()
    }
    return User{
        name = name
        age = age
    }
}

result: User|nil = user_factory("lol", 1)
if(result?nil){
    print("User is nil")
}
# you can pass a option directly into an if statement
if(user := result?User){
    print("User is not nil" + user.name)
}

Error :: schema{
    message:String = ---
    trace: String = ---
    file_position: String = ---

    kek :: fn(message:String, line:String=@@line, file:String=@@file)->Error{
        return Error{
            message = message,
            trace = get_trace(),
            line = line,
            file = file
        }
    }

    print_trace :: fn(const self) -> nil {
        print("Error: " + self.message)
    }
}

Error.kek("lol").print_trace()

# built in union type
u: User|ArrayOfUser|Error = user_factory("lol", 1)
if(u?Error){
    print("Error: ", u)
}
elif(user := u?User){
    user.print_name()
}
elif(arr := u?ArrayOfUser){
    for user in arr {
        user.print_name()
    }
}

lol := 1

# definitiosn are local but can acccees all vars from outiside
{
}

# capture block cannot access variables from the outer scope
# only constants

(){


}

# capture block without -> return type
# will return outer function if contains return
(){

  print(lol)

  u1: User|ArrayOfUser|Error = user_factory("lol", 1)
  if(u?Error){return Error}

  u2: User|ArrayOfUser|Error = user_factory("lol", 1)
  if(u?Error){return Error}

  u3: User|ArrayOfUser|Error = user_factory("lol", 1)
  if(u?Error){return Error}

}



# we can create a new object
myObject := object{
    name = "John"
    age = 20
}

isUser : Bool = myObject.is(User)
myUser : User = cast(myObject, User)
myUser2: User = User{
    name = "John"
    age = 20
}

# self is mutable by default
# all other variables are immutable by default
Map.is := fn(const self, const _schema:Type) -> Bool {
    return _schema in self.__schemas
}

check := fn(const self:Map, _schema:Type) -> nil!TypeError {
    if not self.is(_schema) {
        error TypeError("Object does not match schema")
    }
}

for i, v in myMap (){
    print(i, v)
}

pub battle := object{

    player: Player = Player{
        name = "John"
        health = 100
    }

    enemy: Enemy = Enemy{
        name = "Goblin"
        health = 50
    }

}

# we now can create a "class" with a "constructor"
# without any magic
Person :: schema{
        implements HelloSayer # implements interface: compiler looks for the needed methods
        use User # needs to set the user values

        name:String = "default name"
        # age need to be set in the constructor
        age:Int = ---

        new :: fn(name:String, age:Int)-> Person{
           return Person{
             name = name
             age = age
           }
        }
    }
}


# create a method -> first parameter is self
sayHello : (self:Person.Type)->String = fn(const self:Person.Type)->String{
    return "Hello " + self.name
}

# create a new person and call the method
john = Person.new("John", 20)
john.sayHello() # the method call syntax is different, to avoid confusion with the function call
# :: passes the object as the first parameter
json.print()

# we can define needed methods in interfaces
HelloSayer : Type = interface{
    # we can omit the type of the self parameter
    # this allows for polymorphism
    # --- means that there is no default implementation
    sayHello:(self)->String = ---
}

# simple if statement
if 1 == 1 {
    print("1 is 1")
}elif 1 == 2 {
    print("1 is 2")
}else{
    print("1 is not 1 or 2")
}

# all for loops work with generators
for i in range(0,10) {
    print(i)
}



myUsers : const ListOfUser = const [
    User{
        name = "John"
        age = 20
    },
    User{
        name = "Jane"
        age = 21
    }
]

for index, user in myUsers {
    print(index, user)
    user.check(User) # check if the user is a User, crash if not
}

## error handling
for index, user in myUsers {
    print(index, user)
    user::check(User)! # check if the user is a User, crash if not
    # the !!! marks-> can crash here, we dont do anything with the error
}

# forloops -> lists or maps
for index:Int, user:User in myUsers {
    print(index, user)
    user.check(User) catch(e: TypeError){
      print("Error: ", e)
      exit(1)
    }
}


is_user := fn(object:Map)->Bool{

   # show how recover works
   bool_value := user::check(User) recover(e: TypeError){
     return false
   }

   if bool_value {
       print("Object is a user")
       my_schemas : List[Type] = user.__schemas
       for _, s in my_schemas {
           print("Schema: ", s)
       }
   }

   return bool_value

}


return_optional := fn()->Int?{
    rand := random(1,100)
    if rand > 50 {
        return rand
    }
    return nil
}


# code block
# like a function, but without fn
() -> nil {
    print("Hello")
    print("World")
}

# directly evaluated block
my_int: Int = ()->Int{
    return 10
}

# directly evaluated block
# can also be used for try catch
my_int : Int = ()->Int{
    # ... lots or exception throwing code
    return 10
}
recover(e: Exception){
  print("Error: ", e)
  return 0
}
catch(e: Error){
  print("Error: ", e)
  exit(1)
}

print(my_int)


# braucht man generics?
# nein, weil man kann einfach immer sagen "Map"
# und man schaut dann nach ob die richtigen schemas erfÃ¼llt sind


# nested schemas??

DatabaseObject: Type = schema{
    id:Int = -1
    created_at:Int = -1
}

SomeUserTableEntry: Type = schema{
    use DatabaseObject  # now User demands id and created_at
    name:String = ""
    age:Int = 0
}

# Compile time schema check
# schemas can be checked at compile time OR at runtime
# but runtime checks are slower, so we should avoid them

# this protocol stuff is potentially slow during runtime ...
myProtocol := fn(a: Any)->nil{

    # case allows for type-pattern matching
    # if a is a User, the first case is executed
    # if a is a DatabaseObject, the second case is executed
    # if both fail, the else case is executed
    # case looks if they can be passed into the
    # blocks

    some_field := 1234

    case(a){

        (a: User) -> nil {
          use some_field  # get context from the outer scope
          # even this is a inner scope
          print(some_field + 132)
          print("User")
        }

        (a: DataBaseObject) -> nil{
          use some_field
          print(some_field -33)
          print("DatabaseObject")
        }

        else (a: Any) -> nil {
          print("Unknown type")
        }

    }

}

# function type
myFunction: FunctionType = fn(a: Int) -> Int


# sub functions
# sub functions allow to place function inside of functions
# but place them at the end
# sub means, that the variable if available only inside of the function+
# but even before the function is defined
# sub functions cannot be var
my_long_function := fn(a: Int) -> Int{

    sub_function_a(
        sub_function_b(a)
    )

     print("lots of code here")


    # sub functions
    sub sub_function_a := fn(b: Int) -> Int{
        return b + 1
    }

    sub sub_function_b := fn(b: Int) -> Int{
        return b + 2
    }

    return sub_function(a)

}


# shorthand for adding to a list
var myList := [1,2,3,4,5]
myList[] = 6

# adding to a map
var myMap := {
    "one" = 1,
    "two" = 2
}
myMap["three"] = 3