# one folder is one module
# we can have one build module
# once we have build the compiler itself in kek
module test:js # or module test:c or module test:php

ruleset("max_for_loop_iterations", 100 )
ruleset("rulename", "some const expression")
ruleset("rulename", "some const expression")


# you copy in libs as single modules
# you can use the compiler to pack a module into one file
# with all the dependency-modules

# we can use const stuff from another module
use ("./path/to_module_folder").module_name::const_value

# we can get stuff from the std lib
use ("std").module_name::const_value

# we can get stuff that is defined by the compiler implementation
use ("dimantic").frontend::*

# or like that
use ("graphics").window::open_window

ruleset("disable_use")
# after this we cannot import anything
ruleset("freeze_ruleset")
# after this we cannot change rules anything

# define a const
MyConst :: 800

# pub allows for export outside of the module
pub ExportedConst :: 800

# define a variable
MyVar := 100

# define a function
myFunc :: fn(a: Int, b: Int) -> Int {
    return a + b
}

SaveAble :: interface {
    save :: fn(self)
}

# trait allows to share functionality
DataObject :: trait {

    table_name :: String
    db_connection :: DataBaseObject
    id: Int

    save :: fn(self) {
       # more logic ...
       self.db_connection.save(self)
    }

}

# define a struct
User :: struct {

    implements SaveAble
    use DataObject

    table_name :: String = "Users"
    db_connection :: DataBaseObject = DataBaseObject()

    id: Int = -1
    name: String
    age: Int

    create_user_fn1 :: fn(name: String, age: Int) -> User {
        return User(
           id: 1,
           name: name,
           age: age
        )
    }

    method1 :: fn(const self){
        print("Hello, ", self.name)
    }

    method1 :: fn(self){
        self.age = self.age + 1
        print("Hello, ", self.name)
    }

    loop_over_users :: fn(users: List(User)){

       for (i := 0 .. users.len; 1) {
          user := users[i]
          print(user)
       }

    }

}


# create a list type -> template
# just generates a list of type of code
# list and map is built in
# basically type generators
# we can have the basic types as templates
# the type is generated at compile time
# and get the name
# TemplateContainer
List(User)
Map(String,User)
#MemoryArena(User,InitSize)
Union(User,Error)
# will be called
Option(User)
TreeNode(Node)
Queue(Message)

NodeType :: enum{
    IntNode
    FloatNode
    StringNode
}

# list expression -> need to match the type
myList := List(User)[]
# map expression -> need to match the type
myMap := Map(String,User){}
# this creates a struct
myObject := User()


Union(User,ListOfUser,Error) # short hand for
User|ListOfUser|Error :: struct {
    User: User
    ListOfUser: ListOfUser
    Error: Error
}

Union(User|ListOfUser|Error|nil) # short hand for
User|ListOfUser|Error|nil :: struct {
    User: User = ---
    ListOfUser: ListOfUser = ---
    Error: Error = ---
    is_nil: bool = ---
}

main::fn(){

    # int list provided
    my_list := List(Int)[1,2,3,4,5,6,7];

    my_list = List(Int)[1];

    my_f_list := List(Float)[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0];

    my_users_list := List(User)[
        User.create_user_fn1("John", 20),
        User.create_user_fn1("Jane", 30)
    ];

    my_map := Map(Int,Int){
        1 = 2,
        3 = 4,
        5 = 6
    };

    some_input := "some_input"

    my_file := (some_input) -> File {
        file_exists := File.exists(some_input)
        if (file_exists){
            file := File.open(some_input)
            return file
        }
        else {
            return File.create(some_input)
        }
    }

    my_user := User(
        id = 1,
        name = "John",
        age = 20
    );

    bad_function :: fn()-> Option(Error){
        return error("Something went wrong")
    }

    if(err:Error= bad_function()?Error){ # a ref that is not nil
       print(
           err.line
           err.file
           err.function
           err.function_state
           err.trace
       )
    }


    if(u?Error){ # a ref that is not nil
    }

    if(err := u?Error){ # a ref that is not nil
    }

    u: Union(User,List(User),Error) = user_factory("lol", 1)
    if(err := u?Error){ # same as if(u.Error == nil){err:= u.Error}
        print("Error: ", err)
    }
    elif(user := u?User){
        user.print_name()
    }
    elif(arr := u?ListOfUser){
        for user in arr {
            user.print_name()
        }
    }

}


# c struct
struct :: A {
    a: Int
    b: Float
    c: String
}

struct :: B {
    a: A # this is a block of memory with the size of A
    b: *A # simple ref to A
    b: ?*A # "nullable" ref to A -> really an option
    c: !*A # this is a ref that is owned by the struct
    # so if the struct gets freed the ref gets freed
}

OnTheStack :: A(1, 2.0, "hello")
OnTheHeap :: *A(1, 2.0, "hello")
# the scope in which sth is passed in is the owner
# you can pass an const once around
